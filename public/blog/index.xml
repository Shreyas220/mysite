<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog Posts on Shreyas Mishra</title>
    <link>//localhost:1313/blog/</link>
    <description>Recent content in Blog Posts on Shreyas Mishra</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Mar 2025 05:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fault tolerance in MillWheels</title>
      <link>//localhost:1313/blog/millwheel/</link>
      <pubDate>Mon, 10 Mar 2025 05:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/millwheel/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Fault tolerance is super important for modern streaming systems since data is always in transit and failure can happen at any stage of the system. &lt;br&gt;&#xA;We can run into issues like lost messages, processing the same message twice, or keeping track of state properly. This can lead to unreliable results or even system downtime. &lt;br&gt;&#xA;For example, think about a system that monitors web searches to spot sudden trends. If a part of the system fails or some data gets dropped, it might miss a new trend or, even worse, trigger false alerts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gossip Protocol</title>
      <link>//localhost:1313/blog/gossip/</link>
      <pubDate>Mon, 10 Mar 2025 05:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/gossip/</guid>
      <description>&lt;h2 id=&#34;gossip&#34;&gt;Gossip&lt;/h2&gt;&#xA;&lt;p&gt;Introduction to gossip protocol&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-do-we-need-gossip-protocol-&#34;&gt;Why do we need gossip protocol ?&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Centralized Coordination Overhead&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
